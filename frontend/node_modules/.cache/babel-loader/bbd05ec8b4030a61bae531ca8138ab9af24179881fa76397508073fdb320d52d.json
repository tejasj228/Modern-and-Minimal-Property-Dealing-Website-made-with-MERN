{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nexport const useTheme = () => {\n  _s();\n  const [isDarkMode, setIsDarkMode] = useState(() => {\n    // Check if localStorage is available (for SSR compatibility)\n    if (typeof window !== 'undefined') {\n      const savedTheme = localStorage.getItem('theme');\n      return savedTheme === 'dark';\n    }\n    return false;\n  });\n  useEffect(() => {\n    const updateNavbarStyles = () => {\n      const navbar = document.querySelector('.navbar');\n      if (!navbar) return;\n      if (isDarkMode) {\n        document.body.classList.add('dark-mode');\n        if (window.scrollY > 100) {\n          navbar.style.background = 'rgba(26, 26, 26, 0.99)';\n          navbar.style.boxShadow = '0 15px 35px rgba(0, 0, 0, 0.5)';\n        } else {\n          navbar.style.background = 'rgba(42, 42, 42, 0.98)';\n          navbar.style.boxShadow = '0 10px 30px rgba(0, 0, 0, 0.4)';\n        }\n      } else {\n        document.body.classList.remove('dark-mode');\n        if (window.scrollY > 100) {\n          navbar.style.background = 'rgba(235, 235, 235, 0.99)';\n          navbar.style.boxShadow = '0 15px 35px rgba(44, 62, 80, 0.2)';\n        } else {\n          navbar.style.background = 'rgba(245, 245, 245, 0.98)';\n          navbar.style.boxShadow = '0 10px 30px rgba(44, 62, 80, 0.15)';\n        }\n      }\n    };\n    updateNavbarStyles();\n\n    // Save theme preference\n    if (typeof window !== 'undefined') {\n      localStorage.setItem('theme', isDarkMode ? 'dark' : 'light');\n    }\n\n    // Add scroll listener for navbar\n    const handleScroll = () => {\n      updateNavbarStyles();\n    };\n    window.addEventListener('scroll', handleScroll);\n    return () => window.removeEventListener('scroll', handleScroll);\n  }, [isDarkMode]);\n  const toggleTheme = () => setIsDarkMode(prev => !prev);\n  return {\n    isDarkMode,\n    toggleTheme\n  };\n};\n_s(useTheme, \"9ybd//f96YiQsDGOyPt7dCRmpeE=\");","map":{"version":3,"names":["useState","useEffect","useTheme","_s","isDarkMode","setIsDarkMode","window","savedTheme","localStorage","getItem","updateNavbarStyles","navbar","document","querySelector","body","classList","add","scrollY","style","background","boxShadow","remove","setItem","handleScroll","addEventListener","removeEventListener","toggleTheme","prev"],"sources":["C:/Users/Tejas Jaiswal/Desktop/OM/property-dealing-website/src/hooks/useTheme.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\n\r\nexport const useTheme = () => {\r\n  const [isDarkMode, setIsDarkMode] = useState(() => {\r\n    // Check if localStorage is available (for SSR compatibility)\r\n    if (typeof window !== 'undefined') {\r\n      const savedTheme = localStorage.getItem('theme');\r\n      return savedTheme === 'dark';\r\n    }\r\n    return false;\r\n  });\r\n\r\n  useEffect(() => {\r\n    const updateNavbarStyles = () => {\r\n      const navbar = document.querySelector('.navbar');\r\n      if (!navbar) return;\r\n\r\n      if (isDarkMode) {\r\n        document.body.classList.add('dark-mode');\r\n        if (window.scrollY > 100) {\r\n          navbar.style.background = 'rgba(26, 26, 26, 0.99)';\r\n          navbar.style.boxShadow = '0 15px 35px rgba(0, 0, 0, 0.5)';\r\n        } else {\r\n          navbar.style.background = 'rgba(42, 42, 42, 0.98)';\r\n          navbar.style.boxShadow = '0 10px 30px rgba(0, 0, 0, 0.4)';\r\n        }\r\n      } else {\r\n        document.body.classList.remove('dark-mode');\r\n        if (window.scrollY > 100) {\r\n          navbar.style.background = 'rgba(235, 235, 235, 0.99)';\r\n          navbar.style.boxShadow = '0 15px 35px rgba(44, 62, 80, 0.2)';\r\n        } else {\r\n          navbar.style.background = 'rgba(245, 245, 245, 0.98)';\r\n          navbar.style.boxShadow = '0 10px 30px rgba(44, 62, 80, 0.15)';\r\n        }\r\n      }\r\n    };\r\n\r\n    updateNavbarStyles();\r\n    \r\n    // Save theme preference\r\n    if (typeof window !== 'undefined') {\r\n      localStorage.setItem('theme', isDarkMode ? 'dark' : 'light');\r\n    }\r\n\r\n    // Add scroll listener for navbar\r\n    const handleScroll = () => {\r\n      updateNavbarStyles();\r\n    };\r\n\r\n    window.addEventListener('scroll', handleScroll);\r\n    return () => window.removeEventListener('scroll', handleScroll);\r\n  }, [isDarkMode]);\r\n\r\n  const toggleTheme = () => setIsDarkMode(prev => !prev);\r\n\r\n  return { isDarkMode, toggleTheme };\r\n};"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAE3C,OAAO,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC5B,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGL,QAAQ,CAAC,MAAM;IACjD;IACA,IAAI,OAAOM,MAAM,KAAK,WAAW,EAAE;MACjC,MAAMC,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;MAChD,OAAOF,UAAU,KAAK,MAAM;IAC9B;IACA,OAAO,KAAK;EACd,CAAC,CAAC;EAEFN,SAAS,CAAC,MAAM;IACd,MAAMS,kBAAkB,GAAGA,CAAA,KAAM;MAC/B,MAAMC,MAAM,GAAGC,QAAQ,CAACC,aAAa,CAAC,SAAS,CAAC;MAChD,IAAI,CAACF,MAAM,EAAE;MAEb,IAAIP,UAAU,EAAE;QACdQ,QAAQ,CAACE,IAAI,CAACC,SAAS,CAACC,GAAG,CAAC,WAAW,CAAC;QACxC,IAAIV,MAAM,CAACW,OAAO,GAAG,GAAG,EAAE;UACxBN,MAAM,CAACO,KAAK,CAACC,UAAU,GAAG,wBAAwB;UAClDR,MAAM,CAACO,KAAK,CAACE,SAAS,GAAG,gCAAgC;QAC3D,CAAC,MAAM;UACLT,MAAM,CAACO,KAAK,CAACC,UAAU,GAAG,wBAAwB;UAClDR,MAAM,CAACO,KAAK,CAACE,SAAS,GAAG,gCAAgC;QAC3D;MACF,CAAC,MAAM;QACLR,QAAQ,CAACE,IAAI,CAACC,SAAS,CAACM,MAAM,CAAC,WAAW,CAAC;QAC3C,IAAIf,MAAM,CAACW,OAAO,GAAG,GAAG,EAAE;UACxBN,MAAM,CAACO,KAAK,CAACC,UAAU,GAAG,2BAA2B;UACrDR,MAAM,CAACO,KAAK,CAACE,SAAS,GAAG,mCAAmC;QAC9D,CAAC,MAAM;UACLT,MAAM,CAACO,KAAK,CAACC,UAAU,GAAG,2BAA2B;UACrDR,MAAM,CAACO,KAAK,CAACE,SAAS,GAAG,oCAAoC;QAC/D;MACF;IACF,CAAC;IAEDV,kBAAkB,CAAC,CAAC;;IAEpB;IACA,IAAI,OAAOJ,MAAM,KAAK,WAAW,EAAE;MACjCE,YAAY,CAACc,OAAO,CAAC,OAAO,EAAElB,UAAU,GAAG,MAAM,GAAG,OAAO,CAAC;IAC9D;;IAEA;IACA,MAAMmB,YAAY,GAAGA,CAAA,KAAM;MACzBb,kBAAkB,CAAC,CAAC;IACtB,CAAC;IAEDJ,MAAM,CAACkB,gBAAgB,CAAC,QAAQ,EAAED,YAAY,CAAC;IAC/C,OAAO,MAAMjB,MAAM,CAACmB,mBAAmB,CAAC,QAAQ,EAAEF,YAAY,CAAC;EACjE,CAAC,EAAE,CAACnB,UAAU,CAAC,CAAC;EAEhB,MAAMsB,WAAW,GAAGA,CAAA,KAAMrB,aAAa,CAACsB,IAAI,IAAI,CAACA,IAAI,CAAC;EAEtD,OAAO;IAAEvB,UAAU;IAAEsB;EAAY,CAAC;AACpC,CAAC;AAACvB,EAAA,CAvDWD,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}